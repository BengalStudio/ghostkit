/**
 * Editor Styles
 */
@import "../variables";

// Grid from Bootstrap 4.1
@import "../_bootstrap/functions";
@import "../_bootstrap/variables";
@import "../_bootstrap/grid";
@import "../_bootstrap/breakpoints";

// Styles from core Columns block
// https://github.com/WordPress/gutenberg/blob/master/blocks/library/columns/editor.scss
.ghostkit-grid {
    position: relative;
    display: block;
    // These margins make sure that nested blocks stack/overlay with the parent block chrome
    // This is sort of an experiment at making sure the editor looks as much like the end result as possible
    // Potentially the rules here can apply to all nested blocks and enable stacking, in which case it should be moved elsewhere
    margin-right: 0;
    margin-left: 0;

    > .editor-inner-blocks > .editor-block-list__layout {
        position: relative;
        display: flex;
        flex-wrap: wrap;
        align-items: flex-start;
        justify-content: flex-start;
        margin-right: -15px;
        margin-left: -15px;

        // This max-width is used to constrain the main editor column, it should not cascade into columns
        .editor-block-list__block {
            max-width: none;
            margin-right: 0;
            margin-left: 0;
        }
    }

    // Fullwide: show margin left/right to ensure there's room for the side UI
    // This is not a 1:1 preview with the front-end where these margins would presumably be zero
    // @todo this could be revisited, by for example showing this margin only when the parent block was selected first
    // Then at least an unselected columns block would be an accurate preview
    .editor-block-list__block[data-align="full"][data-type="ghostkit/grid"] & .editor-block-list__layout {
        &:first-child {
            margin-left: $block-side-ui-padding;
        }
        &:last-child {
            margin-right: $block-side-ui-padding;
        }
    }

    // Hide appender shortcuts in columns
    // @todo This essentially duplicates the mobile styles for the appender component
    // It would be nice to be able to use element queries in that component instead https://github.com/tomhodgins/element-queries-spec
    .editor-inserter-with-shortcuts {
        display: none;
    }
    .editor-block-list__empty-block-inserter,
    .editor-default-block-appender .editor-inserter {
        right: $item-spacing;
        left: auto;
    }
}

// Highlight the label to easily select grid/column block by clicking on it.
[data-type="ghostkit/grid-column"] {
    &:hover::after {
        content: "Select Column";
        position: absolute;
        display: block;
        top: -16px;
        right: 0;
        padding: 4px;
        font-family: $default-font;
        font-size: 11px;
        line-height: 1;
        color: #fff;
        cursor: pointer;
        background-color: $light-gray-700;
        z-index: 21;
    }
    &.is-hovered::after {
        opacity: 0;
    }
    &.is-selected::after {
        display: none;
    }
}

[data-col-class] {
    display: flex;
    flex: 1;
    flex-direction: column;
    width: 0;

    > .editor-block-list__block-edit {
        flex-basis: 100%;
        // stylelint-disable-next-line
        margin-top: 0 !important;
        // stylelint-disable-next-line
        margin-bottom: 0 !important;
    }
}

@each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-down($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        // Provide basic `.col-{bp}` classes for equal-width flexbox columns
        [data-col-class*="ghostkit-col#{$infix}"] {
            flex-basis: 0;
            flex-grow: 1;
            max-width: 100%;
        }

        // col size.
        @for $i from 1 through $grid-columns {
            [data-col-class*="ghostkit-col#{$infix}-#{$i}"] {
                @include make-col($i, $grid-columns);
            }
        }

        // col order.
        [data-col-class*="ghostkit-col-order#{$infix}-first"] {
            order: -1;
        }
        [data-col-class*="ghostkit-col-order#{$infix}-last"] {
            order: $grid-columns + 1;
        }

        @for $i from 0 through $grid-columns {
            [data-col-class*="ghostkit-col-order#{$infix}-#{$i}"] {
                order: $i;
            }
        }
    }
}

// Vertical align.
.ghostkit-grid-align-items-center > .editor-inner-blocks > .editor-block-list__layout {
    align-items: center;
}
.ghostkit-grid-align-items-end > .editor-inner-blocks > .editor-block-list__layout {
    align-items: flex-end;
}

// Horizontal align.
.ghostkit-grid-justify-content-center > .editor-inner-blocks > .editor-block-list__layout {
    justify-content: center;
}
.ghostkit-grid-justify-content-end > .editor-inner-blocks > .editor-block-list__layout {
    justify-content: flex-end;
}
.ghostkit-grid-justify-content-around > .editor-inner-blocks > .editor-block-list__layout {
    justify-content: space-around;
}
.ghostkit-grid-justify-content-between > .editor-inner-blocks > .editor-block-list__layout {
    justify-content: space-between;
}
